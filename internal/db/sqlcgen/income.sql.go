// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: income.sql

package mydb

import (
	"context"
	"database/sql"
)

const createIncome = `-- name: CreateIncome :exec
INSERT INTO finances (user_id, type, source, amount, date, description)
VALUES ($1, 'income', $2, $3, $4, $5)
`

type CreateIncomeParams struct {
	UserID      int32          `json:"user_id"`
	Source      sql.NullString `json:"source"`
	Amount      sql.NullString `json:"amount"`
	Date        sql.NullTime   `json:"date"`
	Description sql.NullString `json:"description"`
}

func (q *Queries) CreateIncome(ctx context.Context, arg CreateIncomeParams) error {
	_, err := q.db.ExecContext(ctx, createIncome,
		arg.UserID,
		arg.Source,
		arg.Amount,
		arg.Date,
		arg.Description,
	)
	return err
}

const getIncomesForUser = `-- name: GetIncomesForUser :many
SELECT finance_id, user_id, type, source, amount, date, description FROM finances
WHERE type = 'income' AND user_id = $1
`

func (q *Queries) GetIncomesForUser(ctx context.Context, userID int32) ([]Finance, error) {
	rows, err := q.db.QueryContext(ctx, getIncomesForUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Finance
	for rows.Next() {
		var i Finance
		if err := rows.Scan(
			&i.FinanceID,
			&i.UserID,
			&i.Type,
			&i.Source,
			&i.Amount,
			&i.Date,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
