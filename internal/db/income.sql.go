// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: income.sql

package db

import (
	"context"
	"database/sql"
)

const createIncome = `-- name: CreateIncome :exec
INSERT INTO incomes (income1, income2, income3) VALUES ($1, $2, $3)
`

type CreateIncomeParams struct {
	Income1 sql.NullString `json:"income1"`
	Income2 sql.NullString `json:"income2"`
	Income3 sql.NullString `json:"income3"`
}

// db/queries/income.sql
func (q *Queries) CreateIncome(ctx context.Context, arg CreateIncomeParams) error {
	_, err := q.db.ExecContext(ctx, createIncome, arg.Income1, arg.Income2, arg.Income3)
	return err
}

const listIncomes = `-- name: ListIncomes :many
SELECT id, income1, income2, income3 FROM incomes
`

func (q *Queries) ListIncomes(ctx context.Context) ([]Income, error) {
	rows, err := q.db.QueryContext(ctx, listIncomes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Income
	for rows.Next() {
		var i Income
		if err := rows.Scan(
			&i.ID,
			&i.Income1,
			&i.Income2,
			&i.Income3,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
